# -*- coding: utf-8 -*-
"""creation_fusion.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1t9myTFwCpLesjrg2zfxaARpXP5ixIPbg

### Comparaison entre fichier DSI et CESNAC

# Importations

## Importation librairies
"""

import pandas as pd
import time
from datetime import datetime
import matplotlib.pyplot as plt
import numpy as np

"""## Importation données

Données DTI et CESNAC
"""

widths= [4,1,4,4,4,9,1,7,3,9,21,6,10,4,2,15,15,3,1,6,76]
noms_colonnes = ["Sequence number", "Code", "Time of departure/entry", "Departure aerodrome", "Arrival aerodrome", "Flight identification", "Main Exemption code", "Type of aircraft", "Operator", "Aircraft Registration", "Comment1", "Flight date", "IFPLID", "Planned_aerodrome", "Charging_zone_overflow", "Entry_point", "Exit_point", "Sup_exemption_code", "Source of the Aircraft Address", "24-bit Aircraft Address", "Comment2"]
noms_colonnes_doubles = [f"{x}_{i+1}" for x in noms_colonnes for i in range(2)]

def importation(nom1, nom2):
  def convert_date_format(df):
      def convert_date(x):
          if pd.isna(x):
            return(x)
          x = str(int(x))
          if len(str(x)) != 6:
              return x
          new_date = x[4:6] + x[2:4] + x[:2]
          if int(new_date[:2]) < 10:
              new_date = '0' + new_date
          return float(new_date)

      df['Flight date'] = df['Flight date'].apply(convert_date)
      return df

  data_DTI = pd.read_fwf(nom1, widths=widths, names=noms_colonnes, skiprows=1, skipfooter = 1)
  data_CESNAC = pd.read_fwf(nom2, widths=widths, names=noms_colonnes, skiprows=1, skipfooter = 1)
  #Conversion sous les bons formats (time + date)
  data_DTI['Time of departure/entry'] = pd.to_numeric(data_DTI['Time of departure/entry'], errors='coerce')
  data_CESNAC['Time of departure/entry'] = pd.to_numeric(data_CESNAC['Time of departure/entry'], errors='coerce')

  data_DTI = convert_date_format(data_DTI)
  data_CESNAC = convert_date_format(data_CESNAC)

  # Lire la première ligne du fichier texte
  with open(nom1, "r") as file:
      premiere_ligne = file.readline()
  # Extraire la date de la première ligne
  date = premiere_ligne.split()[0][6:12]
  # Manipuler la date selon le format requis
  date_fichier1 = date[4:]  + date[2:4] + date[:2]
  # Lire la première ligne du fichier texte
  with open(nom2, "r") as file:
      premiere_ligne = file.readline()
  # Extraire la date de la première ligne
  date = premiere_ligne.split()[0][6:12]
  # Manipuler la date selon le format requis
  date_fichier2 = date[4:]  + date[2:4] + date[:2]
  return data_DTI, data_CESNAC, date_fichier1, date_fichier2

data_DTI, data_CESNAC, fichier_date1, fichier_date2 = importation("data/M-LF-20230522-DTI.txt", "data/M-LF-20230601-090935-001-CESNAC.txt")

"""# Algorithme de comparaison

## Fonction calcul heures de différences
"""

def difference_time(heure1, heure2, date1, date2, date_fichier1, date_fichier2):
    if heure1 <10:
      h1 = "000" + str(int(heure1))
    elif heure1 < 100:
      h1 = "00" + str(int(heure1))
    elif heure1 < 1000:
      h1 = "0" + str(int(heure1))
    else:
      h1 = str(int(heure1))
    if heure2 <10:
      h2 = "000" + str(int(heure2))
    elif heure2 < 100:
      h2 = "00" + str(int(heure2))
    elif heure2 < 1000:
      h2 = "0" + str(int(heure2))
    else:
      h2 = str(int(heure2))

    try:
      date_obj1 = datetime.strptime(str(int(date1)) + h1, '%y%m%d%H%M')
      date_obj2 = datetime.strptime(str(int(date2)) + h2, '%y%m%d%H%M')
    except ValueError:
        # Si les dates ne sont pas dans le bon format, supposer qu'elles sont les mêmes
        date1 = date_fichier1
        date2 = date_fichier2
        # Convertir les dates en objets datetime
        date_obj1 = datetime.strptime(str(int(date1)) + h1, '%y%m%d%H%M')
        date_obj2 = datetime.strptime(str(int(date2)) + h2, '%y%m%d%H%M')

    # Calculer la différence entre les deux horaires
    difference = date_obj1 - date_obj2

    #Avoir la différence en seconde
    difference_seconde = abs(difference.days * 3600*24 + difference.seconds)
    # Convertir la différence en heures et minutes
    difference_heures = difference_seconde // 3600
    difference_minutes = (difference_seconde % 3600) // 60

    # Retourner la différence sous forme d'entier hhmm
    return difference_heures * 100 + difference_minutes

"""## Définition vol similaire"""

def comparaison_vol(vol1, vol2, fichier_date1, fichier_date2) -> bool:
  arrival = (vol1["Arrival aerodrome"] == vol2["Arrival aerodrome"])
  departure = (vol1["Departure aerodrome"] == vol2["Departure aerodrome"])
  id = (vol1["Flight identification"] == vol2[ "Flight identification"])
  if (arrival and departure and id) :
    if (vol1["Type of aircraft"]==vol1["Flight identification"]):
      return(difference_time(vol1["Time of departure/entry"], vol2["Time of departure/entry"], vol1["Flight date"], vol2["Flight date"], fichier_date1, fichier_date2) < 130)
    else:
      return(vol1["Type of aircraft"]!=vol1["Flight identification"] and difference_time(vol1["Time of departure/entry"], vol2["Time of departure/entry"], vol1["Flight date"], vol2["Flight date"], fichier_date1, fichier_date2) < 200)

  else:
    return False

"""## Retrouver vol(s) dans dataset"""

def retrouver_vol(vol, data,fichier_date1, fichier_date2):
    matching_rows = data[data.apply(lambda row: comparaison_vol(vol, row, fichier_date1, fichier_date2), axis=1)]
    index = matching_rows.index
    return ([matching_rows.iloc[0]], index[0]) if len(matching_rows) >0 else ([],0)

"""## Différences entre 2 vols"""

def differences_vols(vol1, vol2):
  diff = []
  noms = noms_colonnes.copy()
  noms.remove("Sequence number")
  for name in noms:
    if vol1[name] != vol2[name] and not(pd.isna(vol1[name]) and pd.isna(vol2[name])) :
      diff.append(name)
  if len(diff)>0:
    return True
  else:
    return False

"""## Comparaison entre deux datasets d'une journée de vol, format voulu par Eurocontrol"""

def comparaison_data(data1, data2, fichier_date1, fichier_date2):
  vols_only_data1 = pd.DataFrame(columns=noms_colonnes)
  index_only_data1 = 0
  vols_only_data2 = data2.copy()
  vols_identiques = pd.DataFrame(columns = noms_colonnes)
  index_identiques = 0
  vols_differents = pd.DataFrame(columns=noms_colonnes_doubles)
  index_differents = 0
  for i in range(len(data1)):
    vols, index = retrouver_vol(data1.iloc[i], vols_only_data2, fichier_date1, fichier_date2)
    if len(vols)==0:
      vols_only_data1.loc[index_only_data1] = data1.iloc[i]
      index_only_data1+=1
    else:
      vols_only_data2 = vols_only_data2.drop(index)
      if differences_vols(data1.iloc[i], vols[0]):

        # Convertir les séries en DataFrame
        data1_df = data1.iloc[i].to_frame().T
        vols_df = vols[0].to_frame().T

        # Ajouter un suffixe aux colonnes de la deuxième ligne
        data1_df.columns = [colonne + '_1' for colonne in data1_df.columns]
        vols_df.columns = [colonne + '_2' for colonne in vols_df.columns]

        # Réinitialiser les index pour aligner les lignes
        data1_df.reset_index(drop=True, inplace=True)
        vols_df.reset_index(drop=True, inplace=True)

        # Créer une nouvelle ligne en alternant les valeurs
        newligne = pd.DataFrame()
        for colonne1, colonne2 in zip(data1_df.columns, vols_df.columns):
            newligne[colonne1] = data1_df[colonne1]
            newligne[colonne2] = vols_df[colonne2]

        # Réinitialiser l'index pour obtenir une seule ligne
        newligne.reset_index(drop=True, inplace=True)

        vols_differents.loc[index_differents] = newligne.iloc[0]

        index_differents+=1


      else:
        vols_identiques.loc[index_identiques] = data1.iloc[i]
        index_identiques+=1

  vols_differents.insert(0, 'compare', 0)
  vols_identiques.insert(0, 'compare', 1)
  vols_only_data1.insert(0, 'compare', 2)
  vols_only_data2.insert(0, 'compare', 3)

  #Mettre compare 1, 2 et 3 sous le bon format (colonnes*2)
  colonnes_dupliquees = [vols_identiques.iloc[:, 0]] + [vols_identiques[colonne].rename(f"{colonne}_{i+1}") for colonne in vols_identiques.columns[1:] for i in range(2)]
  vols_identiques = pd.concat(colonnes_dupliquees, axis=1)


  vols_only_data1.reset_index(drop=True, inplace=True)
  colonnes_dupliquees = []
  colonnes_dupliquees.append(vols_only_data1.iloc[:, 0])
  for colonne in vols_only_data1.columns[1:]:
      colonnes_dupliquees.append(vols_only_data1[colonne].rename(f"{colonne}_1"))
      colonnes_dupliquees.append(pd.Series([np.nan] * len(vols_only_data1), name=f"{colonne}_2"))
  vols_only_data1 = pd.concat(colonnes_dupliquees, axis=1)

  vols_only_data2.reset_index(drop=True, inplace=True)
  colonnes_dupliquees = []
  colonnes_dupliquees.append(vols_only_data2.iloc[:, 0])
  for colonne in vols_only_data2.columns[1:]:
      colonnes_dupliquees.append(pd.Series([np.nan] * len(vols_only_data2), name=f"{colonne}_1"))
      colonnes_dupliquees.append(vols_only_data2[colonne].rename(f"{colonne}_2"))
  vols_only_data2 = pd.concat(colonnes_dupliquees, axis=1)

  result = pd.concat([vols_differents, vols_identiques, vols_only_data1, vols_only_data2])
  result = result.drop("Sequence number_1", axis=1)
  result = result.drop("Sequence number_2", axis=1)
  result = result.reset_index(drop=True)
  return(result)

dataresult = comparaison_data(data_DTI, data_CESNAC, fichier_date1, fichier_date2)

"""# Téléchargement des résultats"""

def telecharger(data_result):
  # Enregistrer le DataFrame au format CSV
  dataresult.to_csv('resultatfusion.txt', sep='\t', index=False)  # Utilisez l'extension .txt pour le nom du fichier

 
telecharger(dataresult)
