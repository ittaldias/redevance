# -*- coding: utf-8 -*-
"""Algo_B.2.4.bis_Traitement_unitaire.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16HJjEKuXIYX5had2bREoIMDb9X8SxgYF

# Traitement unitaire

## Initialisation
"""

def TU_init(df_utile):
    df_utile['aeronef_de_moins_de_deux_tonnes'] = False
    df_utile['vol_a_transmettre'] = False
    df_utile['vol_approche'] = False
    df_utile['vol_interieur'] = False
    df_utile['vol_fronstalier'] = False
    df_utile['vol_VFR'] = False
    df_utile["code_d_exoneration"] = 'Z'
    df_utile['code_exploitant'] = 'Z'
    df_utile['compagnie_française'] = False
    df_utile['type_d_avion_militaire'] = False
    df_utile['PLN_à_verifier_TU'] = False
    df_utile['PLN_valide'] = True
    df_utile['RAZ_des_invalidites_de_type_TU'] = False
    df_utile['invalidite_TU'] = [[] for _ in range(len(df_utile))]
    df_utile['type_d_indicatif'] = ""
    return df_utile

"""## Algo 1"""

def TU_1(df_utile):
    def TU_1_element(x):
        # Vérification de PLN_active
        for col in ["PLN_activerealise", "PLN_activefinal", "PLN_activeprevu"]:
            if col in x and not pd.isna(x[col]):
                if x[col] == "0":
                    x['invalidite_TU'] = x.get('invalidite_TU', []) + ["NACT"]
                break

        # Vérification de typeavion
        for col in ["typeavionrealise", "typeavionfinal", "typeavionprevu"]:
            if col in x and not pd.isna(x[col]):
                if x[col] == "ZZZZ":
                    x['invalidite_TU'] = x.get('invalidite_TU', []) + ["TYPAV"]
                    x['PLN_valide'] = False
                if x[col] in AERONEFS_DE_MOINS_DE_2_TONNES:
                    x['aeronef_de_moins_de_deux_tonnes'] = True
                break
        return x
    df_utile = df_utile.apply(TU_1_element, axis=1)
    return df_utile

"""## Algo 2"""

def TU_2(df_utile):
    def TU_2_element(x):
        # Vérification des colonnes de départ
        for col in ["deprealise", "depfinal", "depprevu"]:
            if col in x and not pd.isna(x[col]):
                if len(x[col]) != 4:
                    x['invalidite_TU'].append("DEPAR1")
                    x['PLN_valide'] = False
                elif x[col] in INDICATEURS_D_EMPLACEMENT_FAUX:
                    x['invalidite_TU'].append("DEPAR2")
                    x['PLN_valide'] = False
                elif trouver_pattern(x[col], AERODROME_A_VERIFIER):
                    x['invalidite_TU'].append("DVPAR3")
                    x['PLN_valide'] = False
            break

        # Vérification des colonnes d'arrivée
        for col in ["arrrealise", "arrfinal", "arrprevu"]:
            if col in x and not pd.isna(x[col]):
                if len(x[col]) != 4:
                    x['invalidite_TU'].append("ARRIV1")
                    x['PLN_valide'] = False
                elif x[col] in INDICATEURS_D_EMPLACEMENT_FAUX:
                    x['invalidite_TU'].append("ARRIV2")
                    x['PLN_valide'] = False
                elif trouver_pattern(x[col], AERODROME_A_VERIFIER):
                    x['invalidite_TU'].append("AVRIV3")
                    x['PLN_valide'] = False
            break
        return x
    df_utile = df_utile.apply(TU_2_element, axis=1)
    return df_utile

"""## Algo 3"""

liste_origin_vol = []
def trouver_code(x, liste):
    return "A"

def TU_3_bis(df_utile):
      def TU_3_bis_element(x):
        for col in ["deprealise", "depfinal", "depprevu"]:
            if col in x and not pd.isna(x[col]) and x[col] != "":
                dep_value = x[col]
                break

        if dep_value == "ZZZZ":
            x['PLN_valide'] = False
            x['PLN_à_verifier_TU'] = False
            x['invalidite_TU'].extend(["DEPAR2", "TRANS1"])
        elif x["ccrArrival"] == "ALGR":
            x['vol_a_transmettre'] = False
        else:
            x['vol_a_transmettre'] = True

        return x

    df_utile = df_utile.apply(TU_3_bis_element, axis=1)
    return df_utile

"""##  Algo 4"""

def TU_4(df_utile):
    def TU_4_element(x):
        x['vol_a_transmettre'] = True

        # Vérification des colonnes de départ pour vol d'approche
        for col in ["deprealise", "depfinal", "depprevu"]:
            if col in x and not pd.isna(x[col]):
                if x[col] in AERODROMES_D_APPROCHE:
                    x["vol_approche"] = True
                break

        # Vérification des colonnes d'arrivée pour vol intérieur
        for col in ["arrrealise", "arrfinal", "arrprevu"]:
            if col in x and not pd.isna(x[col]):
                if x[col][:2] == "LF":
                    x["vol_interieur"] = True
                break

        # Vérification des colonnes de départ pour vol frontalier
        for col in ["deprealise", "depfinal", "depprevu"]:
            if col in x and not pd.isna(x[col]):
                if x[col] in AERODROMES_FRONTALIERS and x["PLN_activefinal"] != 1:
                    x["vol_frontalier"] = True
                break

        return x

    df_utile = df_utile.apply(TU_4_element, axis=1)
    return df_utile

"""## Algo 5"""

def TU_5(df_utile):
    def TU_5_element(x):

        # Vérification des colonnes balise et regleVol
        balise_value = None
        regleVol_value = None
        dep_value = None

        for col in ["baliserealise", "balisefinal", "baliseprevu"]:
            if col in x and not pd.isna(x[col]) and x[col] != "":
                balise_value = x[col]
                break

        for col in ["regleVol_realise", "regleVol_final", "regleVol_prevu"]:
            if col in x and not pd.isna(x[col]) and x[col] != "":
                regleVol_value = x[col]
                break

        for col in ["deprealise", "depfinal", "depprevu"]:
            if col in x and not pd.isna(x[col]) and x[col] != "":
                dep_value = x[col]
                break

        # Conditions basées sur les valeurs trouvées
        if x["typePln"] == "VFR" and balise_value and balise_value.startswith('VFR') and regleVol_value == "V":
            x['vol_a_transmettre'] = False
        elif x["typePln"] in ["APL", "FPL", "FIH", "FII"] and balise_value and balise_value.startswith('VFR'):
            x['vol_a_transmettre'] = False
            x['vol_VFR'] = True
            x["typePln"] = "VFR"
        else:
            if not x.get('vol_VFR', False) and regleVol_value == "V" and x.get('vol_a_transmettre', True):
                x["PLN_valide"] = False
                x['invalidite_TU'].append("TRANS0")
            elif dep_value and dep_value[:2] != "LF" and not x.get('vol_a_transmettre', True) and regleVol_value == "Z":
                x["PLN_valide"] = False
                x['invalidite_TU'].append("TRANS2")
                x["typePln"] = "AFI"
            if not x.get('vol_VFR', False) and any(s.startswith('TRANS') for s in x['invalidite_TU']):
                x['vol_a_transmettre'] = "ADET"

        if x["typePln"] in ["APL", "FPL"] and regleVol_value in ["Y", "Z"] and x.get('vol_a_transmettre', True):
            x["code_d_exoneration"] = "Y"

        return x

    df_utile = df_utile.apply(TU_5_element, axis=1)
    return df_utile

"""## Algo 6"""

def TU_65_element(x):
    if x['typeAvion_prevu'] in AERONEFS_STRICTEMENT_MILITAIRES['typeAvion'].tolist():
        x['type_d_avion_militaire'] = True
        x['PLN_valide'] = False
        x['invalidite_TU'].append("TYPA19")
        x['invalidite_TU'].append("INDI19")
        if not(pd.isna(AERONEFS_STRICTEMENT_MILITAIRES[AERONEFS_STRICTEMENT_MILITAIRES["typeAvion"] == x["typeAvion"]]["CODE_EXONERATION"].iloc[0])):
            x["code_d_exoneration"] = AERONEFS_STRICTEMENT_MILITAIRES[AERONEFS_STRICTEMENT_MILITAIRES["typeAvion"] == x["typeAvion"]]["CODE_EXONERATION"].iloc[0]
            x['code_exploitant'] = AERONEFS_STRICTEMENT_MILITAIRES[AERONEFS_STRICTEMENT_MILITAIRES["typeAvion"] == x["typeAvion"]]["CODE_EXPLOITANT"].iloc[0]
        else:
            x['code_exploitant'] = 'Z'

def TU_64_element(x):
    OPR = trouver_case18("OPR/", x["case18"])
    if not(pd.isna(OPR)) and x['OPR'] in OPERATEURS_MILITAIRES['OPR'].tolist():
        x["code_d_exoneration"] = OPERATEURS_MILITAIRES[OPERATEURS_MILITAIRES["OPR"] == OPR]["CODE_EXONERATION"].iloc[0]
        x['code_exploitant'] = OPERATEURS_MILITAIRES[OPERATEURS_MILITAIRES["OPR"] == OPR]["CODE_EXPLOITANT"].iloc[0]
    else:
        if x['typeAvion_prevu'] in AERONEFS_STRICTEMENT_MILITAIRES['typeAvion'].tolist():
            x['type_d_avion_militaire'] = True
            if not(pd.isna(AERONEFS_STRICTEMENT_MILITAIRES[AERONEFS_STRICTEMENT_MILITAIRES["typeAvion"] == x["typeAvion"]]["CODE_EXONERATION"].iloc[0])):
                x["code_d_exoneration"] = AERONEFS_STRICTEMENT_MILITAIRES[AERONEFS_STRICTEMENT_MILITAIRES["typeAvion"] == x["typeAvion"]]["CODE_EXONERATION"].iloc[0]
                x['code_exploitant'] = AERONEFS_STRICTEMENT_MILITAIRES[AERONEFS_STRICTEMENT_MILITAIRES["typeAvion"] == x["typeAvion"]]["CODE_EXPLOITANT"].iloc[0]
            else:
                x['code_exploitant'] = 'Z'
        x['PLN_valide'] = False
        x['invalidite_TU'].append("EXO19")
        x['invalidite_TU'].append("INDI19")
        x['invalidite_TU'].append("OPR19")

def TU_63_element(x):
    if trouver_pattern(x["callSign_prevu"], IMATRICULATION_CORRECTE):
        if trouver_pattern(x["callSign_prevu"], IMMATRICULATION_A_VERIFIER):
            x['PLN_valide'] = False
            x['invalidite_TU'].append("IVDIC$")
            x['invalidite_TU'].append("EXO$")
            x['invalidite_TU'].append("OPR$")
        else:
            x['type_d_indicatif'] = "IM"
        TU_65_element(x)
    else:
        TU_64_element(x)

def TU_62_element(x):
    x['code_exploitant'] = COMPAGNIES_BIGRAMMES_ET_SUFFIXES[COMPAGNIES_BIGRAMMES_ET_SUFFIXES["INDICATIF"] == x["callSign_prevu"][:2]]["CODE_EXPLOITANT"].iloc[0]
    if x['vol_interieur'] == True:
        x["code_d_exoneration"] = COMPAGNIES_BIGRAMMES_ET_SUFFIXES[COMPAGNIES_BIGRAMMES_ET_SUFFIXES["INDICATIF"] == x["callSign_prevu"][:2]]["CODE_EXONERATION"].iloc[0]
        x['compagnie_française'] = True
        x['type_d_indicatif'] = "BI"
    else:
        x['PLN_valide'] = False
        x['invalidite_TU'].append("INDIC%")
        x['invalidite_TU'].append("EXO%")
        x['invalidite_TU'].append("OPR%")
    TU_65_element(x)

def TU_612_element(x):
    if re.search( r'\d[A-Z]$', x["callSign_prevu"]) and x["callSign_prevu"][-1] == -1:
        x['PLN_valide'] = False
        x['invalidite_TU'].append("INDIC6")
    TU_65_element(x)

def TU_611_element(x):
    if x["callSign_prevu"][-1] in LETTRES_AIR_FRANCE['INDICATIF'].tolist()
        code_air_france = LETTRES_AIR_FRANCE[LETTRES_AIR_FRANCE['INDICATIF'] == x["callSign_prevu"][-1]]["INDICATIF"].iloc[0]
        if code_air_france == 2:
            x['PLN_valide'] = False
            x['invalidite_TU'].append("INDIC8")
            x['invalidite_TU'].append("EXO8")
        elif not code_air_france.isdigit():
            x["code_d_exoneration"] = code_air_france
    else:
        x['PLN_valide'] = False
        x['invalidite_TU'].append("EXO10")
    TU_65_element(x)

def TU_61_element(x):
    if x["callSign_prevu"][:3] in COMPAGNIES_AVEC_TRIGRAMME:
        x['type_d_indicatif'] = "TR"
        if trouver_pattern(x["callSign_prevu"], INDICATIFS_TRIGRAMME_A_VERIFIER):
            x['PLN_valide'] = False
            x['invalidite_TU'].append("IVDIC5")
            x['invalidite_TU'].append("EXO5")
        elif x["callSign_prevu"][:3] == "AFR":
            x['compagnie_française'] = True
            if re.search( r'\d[A-Z]$', x["callSign_prevu"]):
                TU_611_element(x)
            else:
                TU_65_element(x)
        else:
            TU_612_element(x)
    else:
        TU_64_element(x)

def TU_62_element(x):
    a=0

def TU_63_element(x):
    a = 0

def TU_6(df_utile):
    def TU_6_element(x):
        if trouver_pattern(x["callSign_prevu"], INDICATIF_A_CODE_AUTO["INDICATIF"].tolist()):
            x["code_d_exoneration"] = INDICATIF_A_CODE_AUTO[INDICATIF_A_CODE_AUTO["INDICATIF"] == x["callSign_prevu"]]["CODE_EXONERATION"].iloc[0]
            x['code_exploitant'] = INDICATIF_A_CODE_AUTO[INDICATIF_A_CODE_AUTO["INDICATIF"] == x["callSign_prevu"]]["CODE_EXPLOITANT"].iloc[0]
            if x["code_d_exoneration"] == "X" or x["code_d_exoneration"] == "M":
                x['type_d_avion_militaire'] = True
        else:
            if x["callSign_prevu"] in INDICATIFS_A_STRUCTURE_TRIGRAMME_CORRECTE:
                TU_61_element(x)
            elif re.match( r'^[A-Z]{2}\d{3}[A-Z]{2}$', x["callSign_prevu"]) and x["callSign_prevu"][:2] in COMPAGNIES_BIGRAMMES_ET_SUFFIXES["INDICATIF"].tolist():
                TU_62_element(x)
            else:
                TU_63_element(x)
    df_utile = df_utile.apply(TU_6_element, axis=1)
    return df_utile

"""## Algo 7"""

# Chaîne d'entrée
def trouver_case18(prefix, input_string):
    start_index = input_string.find(prefix) + len(prefix)
    end_index = input_string.find(' ', start_index)
    opr_code = input_string[start_index:end_index]
    return opr_code

def TU_7(df_utile):
    def TU_7_element(x):
        # Fonction pour trouver une valeur valide dans les colonnes multiples
        def get_valid_value(element, columns):
            for col in columns:
                if col in element and not pd.isna(element[col]) and element[col] != "":
                    return element[col]
            return None

        PLN_active_value = get_valid_value(x, ["PLN_activerealise", "PLN_activefinal", "PLN_activeprevu"])
        call_sign_value = get_valid_value(x, ["callSign_realise", "callSign_final", "callSign_prevu"])
        code_exoneration_value = get_valid_value(x, ["code_d_exoneration_realise", "code_d_exoneration_final", "code_d_exoneration_prevu"])
        type_vol_value = get_valid_value(x, ["typeVol_realise", "typeVol_final", "typeVol_prevu"])

        if PLN_active_value == "0" and x.get('vol_a_transmettre', False):
            x['PLN_valide'] = False

        if call_sign_value in ["APL", "FPL"]:
            if x.get('vol_a_transmettre', False):
                if code_exoneration_value in ["Y", "Z"]:
                    if type_vol_value == "M":
                        x['PLN_valide'] = False
                        x['invalidite_TU'].extend(["EXO10", "OPR10"])
                    else:
                        if trouver_case18("RMK/", x["case18"]) == "TRAINING" and x.get('vol_interieur', False):
                            x["code_d_exoneration"] = "T"
                        elif type_vol_value == "X" and trouver_case18("RMK/", x["case18"]) != "EVASAN":
                            x['PLN_valide'] = False
                            x['invalidite_TU'].append("EXO12")
            else:
                if trouver_case18("RMK/", x["case18"]) == "TRAINING" and x.get('vol_interieur', False) and code_exoneration_value in ["Y", "Z"]:
                    x["code_d_exoneration"] = "T"

        return x

    df_utile = df_utile.apply(TU_7_element, axis=1)
    return df_utile

"""## Traitement unitaire complet"""

def traitement_unitaire(df_utile):
    df_utile = TU_init(df_utile)
    df_utile = TU_1(df_utile)
    df_utile = TU_2(df_utile)
    if df_utile["depfinal"][:2] == "LF":
        df_utile = TU_4(df_utile)
    else:
        df_utile = TU_3(df_utile)
    return df_utile

def traitement_unitaire(df_utile):
    df_utile = TU_init(df_utile)
    df_utile = TU_1(df_utile)
    df_utile = TU_2(df_utile)

    def check_depfinal_prefix(row):
        for col in ["deprealise", "depfinal", "depprevu"]:
            if col in row and not pd.isna(row[col]) and row[col] != "":
                return row[col][:2] == "LF"
        return False

    if df_utile.apply(check_depfinal_prefix, axis=1).any():
        df_utile = TU_4(df_utile)
    else:
        df_utile = TU_3(df_utile)

    df_utile = TU_5(df_utile)
    df_utile = TU_6(df_utile)
    df_utile = TU_7(df_utile)

    return df_utile