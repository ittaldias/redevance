# -*- coding: utf-8 -*-
"""test_creation_fusion.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17AO5Cti7b5rfTya55xRV9CmIWCcdonlo
"""

from src.creation_fusion import comparaison_data, differences_vols, retrouver_vol, comparaison_vol, difference_time
import pandas as pd
import time
from datetime import datetime
import matplotlib.pyplot as plt
import numpy as np

"""# Test unitaire

## importation librairie et création exemple
"""

import pytest

# Création d'une liste de dictionnaires contenant les données pour chaque ligne
data = [
    {'Sequence number': 1, 'Code': 'F', 'Time of departure/entry': 800, 'Departure aerodrome': 'LFPG', 'Arrival aerodrome': 'EGLL', 'Flight identification': 'BA456', 'Main Exemption code': 'Z', 'Type of aircraft': 'B787', 'Operator': 'British Airways', 'Aircraft Registration': 'G-ZBKA', 'Comment1': float('NaN'), 'Flight date': 230522.0, 'IFPLID': 'AA47754655', 'Planned_aerodrome': float('NaN'), 'Charging_zone_overflow': float('NaN'), 'Entry_point': float('NaN'), 'Exit_point': float('NaN'), 'Sup_exemption_code': float('NaN'), 'Source of the Aircraft Address': 1.0, '24-bit Aircraft Address': '89658A', 'Comment2': float('NaN')},
    {'Sequence number': 2, 'Code': 'I', 'Time of departure/entry': 1015, 'Departure aerodrome': 'EGLL', 'Arrival aerodrome': 'LFPO', 'Flight identification': 'AF123', 'Main Exemption code': 'B', 'Type of aircraft': 'A320', 'Operator': 'Air France', 'Aircraft Registration': 'F-HBNJ', 'Comment1': float('NaN'), 'Flight date': 230522.0, 'IFPLID': 'AA47754656', 'Planned_aerodrome': float('NaN'), 'Charging_zone_overflow': float('NaN'), 'Entry_point': float('NaN'), 'Exit_point': float('NaN'), 'Sup_exemption_code': float('NaN'), 'Source of the Aircraft Address': 1.0, '24-bit Aircraft Address': '89658B', 'Comment2': float('NaN')},
    {'Sequence number': 3, 'Code': 'F', 'Time of departure/entry': 1245, 'Departure aerodrome': 'LFPO', 'Arrival aerodrome': 'EHAM', 'Flight identification': 'KL789', 'Main Exemption code': 'Z', 'Type of aircraft': 'B737', 'Operator': 'KLM Royal Dutch Airlines', 'Aircraft Registration': 'PH-BCD', 'Comment1': float('NaN'), 'Flight date': 230522.0, 'IFPLID': 'AA47754657', 'Planned_aerodrome': float('NaN'), 'Charging_zone_overflow': float('NaN'), 'Entry_point': float('NaN'), 'Exit_point': float('NaN'), 'Sup_exemption_code': float('NaN'), 'Source of the Aircraft Address': 1.0, '24-bit Aircraft Address': '89658C', 'Comment2': float('NaN')},
    {'Sequence number': 4, 'Code': 'D', 'Time of departure/entry': 1400, 'Departure aerodrome': 'EHAM', 'Arrival aerodrome': 'LFPO', 'Flight identification': 'KL790', 'Main Exemption code': 'B', 'Type of aircraft': 'B737', 'Operator': 'KLM Royal Dutch Airlines', 'Aircraft Registration': 'PH-XYZ', 'Comment1': float('NaN'), 'Flight date': 230522.0, 'IFPLID': 'AA47754658', 'Planned_aerodrome': float('NaN'), 'Charging_zone_overflow': float('NaN'), 'Entry_point': float('NaN'), 'Exit_point': float('NaN'), 'Sup_exemption_code': float('NaN'), 'Source of the Aircraft Address': 1.0, '24-bit Aircraft Address': '89658D', 'Comment2': float('NaN')},
    {'Sequence number': 5, 'Code': 'A', 'Time of departure/entry': 700, 'Departure aerodrome': 'LFPO', 'Arrival aerodrome': 'LFPG', 'Flight identification': 'AF789', 'Main Exemption code': 'B', 'Type of aircraft': 'A380', 'Operator': 'Air France', 'Aircraft Registration': 'F-HPQW', 'Comment1': float('NaN'), 'Flight date': 230522.0, 'IFPLID': 'AA47754659', 'Planned_aerodrome': float('NaN'), 'Charging_zone_overflow': float('NaN'), 'Entry_point': float('NaN'), 'Exit_point': float('NaN'), 'Sup_exemption_code': float('NaN'), 'Source of the Aircraft Address': 1.0, '24-bit Aircraft Address': '89658E', 'Comment2': float('NaN')},
    {'Sequence number': 6, 'Code': 'F', 'Time of departure/entry': 1009, 'Departure aerodrome': 'LFPB', 'Arrival aerodrome': 'LTBA', 'Flight identification': 'A6SMS', 'Main Exemption code': 'Z', 'Type of aircraft': 'FA8X', 'Operator': 'Z', 'Aircraft Registration': 'A6SMS', 'Comment1': float('NaN'), 'Flight date': 230522.0, 'IFPLID': 'AA47754659', 'Planned_aerodrome': float('NaN'), 'Charging_zone_overflow': float('NaN'), 'Entry_point': float('NaN'), 'Exit_point': float('NaN'), 'Sup_exemption_code': float('NaN'), 'Source of the Aircraft Address': 1.0, '24-bit Aircraft Address': '89658E', 'Comment2': float('NaN')},
    {'Sequence number': 7, 'Code': 'I', 'Time of departure/entry': 1515, 'Departure aerodrome': 'LFPG', 'Arrival aerodrome': 'EGLL', 'Flight identification': 'BA123', 'Main Exemption code': 'B', 'Type of aircraft': 'B738', 'Operator': 'British Airways', 'Aircraft Registration': 'G-EUUV', 'Comment1': float('NaN'), 'Flight date': 230522.0, 'IFPLID': 'AA47754660', 'Planned_aerodrome': float('NaN'), 'Charging_zone_overflow': float('NaN'), 'Entry_point': float('NaN'), 'Exit_point': float('NaN'), 'Sup_exemption_code': float('NaN'), 'Source of the Aircraft Address': 1.0, '24-bit Aircraft Address': '89658F', 'Comment2': float('NaN')},
    {'Sequence number': 8, 'Code': 'F', 'Time of departure/entry': 845, 'Departure aerodrome': 'LAXX', 'Arrival aerodrome': 'KJFK', 'Flight identification': 'DL456', 'Main Exemption code': 'Z', 'Type of aircraft': 'B777', 'Operator': 'Delta Airlines', 'Aircraft Registration': 'N123DL', 'Comment1': float('NaN'), 'Flight date': 230522.0, 'IFPLID': 'AA47754661', 'Planned_aerodrome': float('NaN'), 'Charging_zone_overflow': float('NaN'), 'Entry_point': float('NaN'), 'Exit_point': float('NaN'), 'Sup_exemption_code': float('NaN'), 'Source of the Aircraft Address': 1.0, '24-bit Aircraft Address': '89658G', 'Comment2': float('NaN')},
    {'Sequence number': 9, 'Code': 'D', 'Time of departure/entry': 1200, 'Departure aerodrome': 'JFK', 'Arrival aerodrome': 'LHR', 'Flight identification': 'VS201', 'Main Exemption code': 'B', 'Type of aircraft': 'A350', 'Operator': 'Virgin Atlantic', 'Aircraft Registration': 'G-VNEW', 'Comment1': float('NaN'), 'Flight date': 230522.0, 'IFPLID': 'AA47754662', 'Planned_aerodrome': float('NaN'), 'Charging_zone_overflow': float('NaN'), 'Entry_point': float('NaN'), 'Exit_point': float('NaN'), 'Sup_exemption_code': float('NaN'), 'Source of the Aircraft Address': 1.0, '24-bit Aircraft Address': '89658H', 'Comment2': float('NaN')},
    {'Sequence number': 10, 'Code': 'A', 'Time of departure/entry': 930, 'Departure aerodrome': 'LFLL', 'Arrival aerodrome': 'LSZH', 'Flight identification': 'LX200', 'Main Exemption code': 'B', 'Type of aircraft': 'A320', 'Operator': 'Swiss International Air Lines', 'Aircraft Registration': 'HB-JVG', 'Comment1': float('NaN'), 'Flight date': 230522.0, 'IFPLID': 'AA47754663', 'Planned_aerodrome': float('NaN'), 'Charging_zone_overflow': float('NaN'), 'Entry_point': float('NaN'), 'Exit_point': float('NaN'), 'Sup_exemption_code': float('NaN'), 'Source of the Aircraft Address': 1.0, '24-bit Aircraft Address': '89658I', 'Comment2': float('NaN')},
    {'Sequence number': 11, 'Code': 'F', 'Time of departure/entry': 1145, 'Departure aerodrome': 'EGLL', 'Arrival aerodrome': 'EHAM', 'Flight identification': 'KL100', 'Main Exemption code': 'B', 'Type of aircraft': 'B737', 'Operator': 'KLM Royal Dutch Airlines', 'Aircraft Registration': 'PH-BXW', 'Comment1': float('NaN'), 'Flight date': 230522.0, 'IFPLID': 'AA47754664', 'Planned_aerodrome': float('NaN'), 'Charging_zone_overflow': float('NaN'), 'Entry_point': float('NaN'), 'Exit_point': float('NaN'), 'Sup_exemption_code': float('NaN'), 'Source of the Aircraft Address': 1.0, '24-bit Aircraft Address': '89658J', 'Comment2': float('NaN')},
    {'Sequence number': 12, 'Code': 'I', 'Time of departure/entry': 815, 'Departure aerodrome': 'EDDF', 'Arrival aerodrome': 'LIMC', 'Flight identification': 'LH206', 'Main Exemption code': 'B', 'Type of aircraft': 'A321', 'Operator': 'Lufthansa', 'Aircraft Registration': 'D-AIRR', 'Comment1': float('NaN'), 'Flight date': 230522.0, 'IFPLID': 'AA47754665', 'Planned_aerodrome': float('NaN'), 'Charging_zone_overflow': float('NaN'), 'Entry_point': float('NaN'), 'Exit_point': float('NaN'), 'Sup_exemption_code': float('NaN'), 'Source of the Aircraft Address': 1.0, '24-bit Aircraft Address': '89658K', 'Comment2': float('NaN')},
    { 'Sequence number': 13, 'Code': 'D', 'Time of departure/entry': 1300, 'Departure aerodrome': 'EHAM', 'Arrival aerodrome': 'LFPG', 'Flight identification': 'AF103', 'Main Exemption code': 'B', 'Type of aircraft': 'A380', 'Operator': 'Air France', 'Aircraft Registration': 'F-HPJB', 'Comment1': float('NaN'), 'Flight date': 230522.0, 'IFPLID': 'AA47754666', 'Planned_aerodrome': float('NaN'), 'Charging_zone_overflow': float('NaN'), 'Entry_point': float('NaN'), 'Exit_point': float('NaN'), 'Sup_exemption_code': float('NaN'), 'Source of the Aircraft Address': 1.0, '24-bit Aircraft Address': '89658L', 'Comment2': float('NaN')},
]

# Convertir la liste de dictionnaires en DataFrame
data_test1 = pd.DataFrame(data)

data = [
    {'Sequence number': 6, 'Code': 'F', 'Time of departure/entry': 1009, 'Departure aerodrome': 'LFPB', 'Arrival aerodrome': 'LTBA', 'Flight identification': 'A6SMS', 'Main Exemption code': 'Z', 'Type of aircraft': 'FA8X', 'Operator': 'Z', 'Aircraft Registration': 'A6SMS', 'Comment1': float('NaN'), 'Flight date': 230522.0, 'IFPLID': 'AA47754659', 'Planned_aerodrome': float('NaN'), 'Charging_zone_overflow': float('NaN'), 'Entry_point': float('NaN'), 'Exit_point': float('NaN'), 'Sup_exemption_code': float('NaN'), 'Source of the Aircraft Address': 1.0, '24-bit Aircraft Address': '89658E', 'Comment2': float('NaN')},
    {'Sequence number': 7, 'Code': 'I', 'Time of departure/entry': 1515, 'Departure aerodrome': 'LFPG', 'Arrival aerodrome': 'EGLL', 'Flight identification': 'BA123', 'Main Exemption code': 'B', 'Type of aircraft': 'B738', 'Operator': 'British Airways', 'Aircraft Registration': 'G-EUUV', 'Comment1': float('NaN'), 'Flight date': 230522.0, 'IFPLID': 'AA47754660', 'Planned_aerodrome': float('NaN'), 'Charging_zone_overflow': float('NaN'), 'Entry_point': float('NaN'), 'Exit_point': float('NaN'), 'Sup_exemption_code': float('NaN'), 'Source of the Aircraft Address': 1.0, '24-bit Aircraft Address': '89658F', 'Comment2': float('NaN')},
    {'Sequence number': 8, 'Code': 'F', 'Time of departure/entry': 815, 'Departure aerodrome': 'LAXX', 'Arrival aerodrome': 'KJFK', 'Flight identification': 'DL456', 'Main Exemption code': 'Z', 'Type of aircraft': 'B777', 'Operator': 'Delta Airlines', 'Aircraft Registration': 'N123DL', 'Comment1': float('NaN'), 'Flight date': 230522.0, 'IFPLID': 'AA47754661', 'Planned_aerodrome': float('NaN'), 'Charging_zone_overflow': float('NaN'), 'Entry_point': float('NaN'), 'Exit_point': float('NaN'), 'Sup_exemption_code': float('NaN'), 'Source of the Aircraft Address': 1.0, '24-bit Aircraft Address': '89658G', 'Comment2': float('NaN')},
    {'Sequence number': 9, 'Code': 'D', 'Time of departure/entry': 1200, 'Departure aerodrome': 'JFK', 'Arrival aerodrome': 'LHR', 'Flight identification': 'VS201', 'Main Exemption code': 'B', 'Type of aircraft': 'A350', 'Operator': 'Virgin Atlantic', 'Aircraft Registration': 'G-VNEW', 'Comment1': float('NaN'), 'Flight date': 230522.0, 'IFPLID': 'AA47754662', 'Planned_aerodrome': float('NaN'), 'Charging_zone_overflow': float('NaN'), 'Entry_point': float('NaN'), 'Exit_point': float('NaN'), 'Sup_exemption_code': float('NaN'), 'Source of the Aircraft Address': 1.0, '24-bit Aircraft Address': '89658H', 'Comment2': float('NaN')},
    {'Sequence number': 10, 'Code': 'A', 'Time of departure/entry': 930, 'Departure aerodrome': 'LFLL', 'Arrival aerodrome': 'LSZH', 'Flight identification': 'LX200', 'Main Exemption code': 'B', 'Type of aircraft': 'A320', 'Operator': 'Swiss International Air Lines', 'Aircraft Registration': 'HB-JVG', 'Comment1': float('NaN'), 'Flight date': 230522.0, 'IFPLID': 'AA47754663', 'Planned_aerodrome': float('NaN'), 'Charging_zone_overflow': float('NaN'), 'Entry_point': float('NaN'), 'Exit_point': float('NaN'), 'Sup_exemption_code': float('NaN'), 'Source of the Aircraft Address': 1.0, '24-bit Aircraft Address': '89658I', 'Comment2': float('NaN')},
    {'Sequence number': 11, 'Code': 'F', 'Time of departure/entry': 1145, 'Departure aerodrome': 'EGLL', 'Arrival aerodrome': 'EHAM', 'Flight identification': 'KL100', 'Main Exemption code': 'B', 'Type of aircraft': 'B737', 'Operator': 'KLM Royal Dutch Airlines', 'Aircraft Registration': 'PH-BXW', 'Comment1': float('NaN'), 'Flight date': 230522.0, 'IFPLID': 'AA47754664', 'Planned_aerodrome': float('NaN'), 'Charging_zone_overflow': float('NaN'), 'Entry_point': float('NaN'), 'Exit_point': float('NaN'), 'Sup_exemption_code': float('NaN'), 'Source of the Aircraft Address': 1.0, '24-bit Aircraft Address': '89658J', 'Comment2': float('NaN')},
    {'Sequence number': 12, 'Code': 'I', 'Time of departure/entry': 815, 'Departure aerodrome': 'EDDF', 'Arrival aerodrome': 'LIMC', 'Flight identification': 'LH206', 'Main Exemption code': 'B', 'Type of aircraft': 'A321', 'Operator': 'Lufthansa', 'Aircraft Registration': 'D-AIRR', 'Comment1': float('NaN'), 'Flight date': 230522.0, 'IFPLID': 'AA47754665', 'Planned_aerodrome': float('NaN'), 'Charging_zone_overflow': float('NaN'), 'Entry_point': float('NaN'), 'Exit_point': float('NaN'), 'Sup_exemption_code': float('NaN'), 'Source of the Aircraft Address': 1.0, '24-bit Aircraft Address': '89658K', 'Comment2': float('NaN')},
    {'Sequence number': 13, 'Code': 'D', 'Time of departure/entry': 1300, 'Departure aerodrome': 'EHAM', 'Arrival aerodrome': 'LFPG', 'Flight identification': 'AF103', 'Main Exemption code': 'B', 'Type of aircraft': 'A380', 'Operator': 'Air France', 'Aircraft Registration': 'F-HPJB', 'Comment1': float('NaN'), 'Flight date': 230522.0, 'IFPLID': 'AA47754666', 'Planned_aerodrome': float('NaN'), 'Charging_zone_overflow': float('NaN'), 'Entry_point': float('NaN'), 'Exit_point': float('NaN'), 'Sup_exemption_code': float('NaN'), 'Source of the Aircraft Address': 1.0, '24-bit Aircraft Address': '89658L', 'Comment2': float('NaN')},
    {'Sequence number': 14, 'Code': 'F', 'Time of departure/entry': 1030, 'Departure aerodrome': 'LAXX', 'Arrival aerodrome': 'KJFK', 'Flight identification': 'DL789', 'Main Exemption code': 'Z', 'Type of aircraft': 'B777', 'Operator': 'Delta Airlines', 'Aircraft Registration': 'N456DL', 'Comment1': float('NaN'), 'Flight date': 230522.0, 'IFPLID': 'AA47754667', 'Planned_aerodrome': float('NaN'), 'Charging_zone_overflow': float('NaN'), 'Entry_point': float('NaN'), 'Exit_point': float('NaN'), 'Sup_exemption_code': float('NaN'), 'Source of the Aircraft Address': 1.0, '24-bit Aircraft Address': '89658M', 'Comment2': float('NaN')},
    {'Sequence number': 15, 'Code': 'I', 'Time of departure/entry': 1315, 'Departure aerodrome': 'JFK', 'Arrival aerodrome': 'LHR', 'Flight identification': 'VS123', 'Main Exemption code': 'B', 'Type of aircraft': 'A350', 'Operator': 'Virgin Atlantic', 'Aircraft Registration': 'G-VRNY', 'Comment1': float('NaN'), 'Flight date': 230522.0, 'IFPLID': 'AA47754668', 'Planned_aerodrome': float('NaN'), 'Charging_zone_overflow': float('NaN'), 'Entry_point': float('NaN'), 'Exit_point': float('NaN'), 'Sup_exemption_code': float('NaN'), 'Source of the Aircraft Address': 1.0, '24-bit Aircraft Address': '89658N', 'Comment2': float('NaN')},
    {'Sequence number': 16, 'Code': 'F', 'Time of departure/entry': 845, 'Departure aerodrome': 'EDDF', 'Arrival aerodrome': 'LIMC', 'Flight identification': 'LH206', 'Main Exemption code': 'B', 'Type of aircraft': 'A321', 'Operator': 'Lufthansa', 'Aircraft Registration': 'D-AIRR', 'Comment1': float('NaN'), 'Flight date': 230522.0, 'IFPLID': 'AA47754669', 'Planned_aerodrome': float('NaN'), 'Charging_zone_overflow': float('NaN'), 'Entry_point': float('NaN'), 'Exit_point': float('NaN'), 'Sup_exemption_code': float('NaN'), 'Source of the Aircraft Address': 1.0, '24-bit Aircraft Address': '89658O', 'Comment2': float('NaN')},
    {'Sequence number': 17, 'Code': 'D', 'Time of departure/entry': 1300, 'Departure aerodrome': 'EHAM', 'Arrival aerodrome': 'LFPG', 'Flight identification': 'AF103', 'Main Exemption code': 'B', 'Type of aircraft': 'A380', 'Operator': 'Air France', 'Aircraft Registration': 'F-HPJB', 'Comment1': float('NaN'), 'Flight date': 230522.0, 'IFPLID': 'AA47754670', 'Planned_aerodrome': float('NaN'), 'Charging_zone_overflow': float('NaN'), 'Entry_point': float('NaN'), 'Exit_point': float('NaN'), 'Sup_exemption_code': float('NaN'), 'Source of the Aircraft Address': 1.0, '24-bit Aircraft Address': '89658P', 'Comment2': float('NaN')}
]

data_test2 = pd.DataFrame(data)

data = {
    'compare': [0, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3],
    'Code_1': ['F', 'F', 'I', 'D', 'A', 'F', 'I', 'D', 'F', 'I', 'F', 'D', 'A', np.nan, np.nan, np.nan, np.nan],
    'Code_2': ['F', 'F', 'I', 'D', 'A', 'F', 'I', 'D', np.nan, np.nan, np.nan, np.nan, np.nan, 'F', 'I', 'F', 'D'],
    'Time of departure/entry_1': [845, 1009, 1515, 1200, 930, 1145, 815, 1300, 800, 1015, 1245, 1400, 700, np.nan, np.nan, np.nan, np.nan],
    'Time of departure/entry_2': [815, 1009, 1515, 1200, 930, 1145, 815, 1300,  np.nan, np.nan, np.nan, np.nan, np.nan, 1030, 1315, 845, 1300],
    'Departure aerodrome_1': ['LAXX', 'LFPB', 'LFPG', 'JFK', 'LFLL', 'EGLL', 'EDDF', 'EHAM', 'LFPG', 'EGLL', 'LFPO', 'EHAM', 'LFPO',  np.nan, np.nan, np.nan, np.nan],
    'Departure aerodrome_2': ['LAXX', 'LFPB', 'LFPG', 'JFK', 'LFLL', 'EGLL', 'EDDF', 'EHAM', np.nan, np.nan, np.nan, np.nan, np.nan, 'LAXX', 'JFK', 'EDDF', 'EHAM'],
    'Arrival aerodrome_1': ['KJFK', 'LTBA', 'EGLL', 'LHR', 'LSZH', 'EHAM', 'LIMC', 'LFPG', 'EGLL', 'LFPO', 'EHAM', 'LFPO', 'LFPG',  np.nan, np.nan, np.nan, np.nan],
    'Arrival aerodrome_2': ['KJFK', 'LTBA', 'EGLL', 'LHR', 'LSZH', 'EHAM', 'LIMC', 'LFPG', np.nan, np.nan, np.nan, np.nan, np.nan, 'KJFK', 'LHR', 'LIMC', 'LFPG'],
    'Flight identification_1': ['DL456', 'A6SMS', 'BA123', 'VS201', 'LX200', 'KL100', 'LH206', 'AF103', 'BA456', 'AF123', 'KL789', 'KL790', 'AF789',  np.nan, np.nan, np.nan, np.nan],
    'Flight identification_2': ['DL456', 'A6SMS', 'BA123', 'VS201', 'LX200', 'KL100', 'LH206', 'AF103', np.nan, np.nan, np.nan, np.nan, np.nan, 'DL789', 'VS123', 'LH206', 'AF103'],
    'Main Exemption code_1': ['Z', 'Z', 'B', 'B', 'B', 'B', 'B', 'B', 'Z', 'B', 'Z', 'B', 'B',  np.nan, np.nan, np.nan, np.nan],
    'Main Exemption code_2': ['Z', 'Z', 'B', 'B', 'B', 'B', 'B', 'B',np.nan, np.nan, np.nan, np.nan, np.nan, 'Z', 'B', 'B', 'B'],
    'Type of aircraft_1': ['B777', 'FA8X', 'B738', 'A350', 'A320', 'B737', 'A321', 'A380', 'B787', 'A320', 'B737', 'B737', 'A380',  np.nan, np.nan, np.nan, np.nan],
    'Type of aircraft_2': ['B777', 'FA8X', 'B738', 'A350', 'A320', 'B737', 'A321', 'A380', np.nan, np.nan, np.nan, np.nan, np.nan, 'B777', 'A350', 'A321', 'A380'],
    'Operator_1': ['Delta Airlines', 'Z', 'British Airways', 'Virgin Atlantic', 'Swiss International Air Lines', 'KLM Royal Dutch Airlines', 'Lufthansa', 'Air France', 'British Airways', 'Air France', 'KLM Royal Dutch Airlines', 'KLM Royal Dutch Airlines', 'Air France',  np.nan, np.nan, np.nan, np.nan],
    'Operator_2': ['Delta Airlines', 'Z', 'British Airways', 'Virgin Atlantic', 'Swiss International Air Lines', 'KLM Royal Dutch Airlines', 'Lufthansa', 'Air France', np.nan, np.nan, np.nan, np.nan, np.nan, 'Delta Airlines', 'Virgin Atlantic', 'Lufthansa', 'Air France'],
    'Aircraft Registration_1': ['N123DL', 'A6SMS', 'G-EUUV', 'G-VNEW', 'HB-JVG', 'PH-BXW', 'D-AIRR', 'F-HPJB', 'G-ZBKA', 'F-HBNJ', 'PH-BCD', 'PH-XYZ', 'F-HPQW',  np.nan, np.nan, np.nan, np.nan],
    'Aircraft Registration_2': ['N123DL', 'A6SMS', 'G-EUUV', 'G-VNEW', 'HB-JVG', 'PH-BXW', 'D-AIRR', 'F-HPJB', np.nan, np.nan, np.nan, np.nan, np.nan, 'N456DL', 'G-VRNY', 'D-AIRR', 'F-HPJB'],
    'Comment1_1' : [np.nan] * 17,
    'Comment1_2' : [np.nan] * 17,
    'Flight date_1': [230522.0, 230522.0, 230522.0, 230522.0, 230522.0, 230522.0, 230522.0, 230522.0, 230522.0, 230522.0, 230522.0, 230522.0, 230522.0,  np.nan, np.nan, np.nan, np.nan],
    'Flight date_2': [230522.0, 230522.0, 230522.0, 230522.0, 230522.0, 230522.0, 230522.0, 230522.0, np.nan, np.nan, np.nan, np.nan, np.nan, 230522.0, 230522.0, 230522.0, 230522.0],
    'IFPLID_1': ['AA47754661', 'AA47754659', 'AA47754660', 'AA47754662', 'AA47754663', 'AA47754664', 'AA47754665', 'AA47754666', 'AA47754655', 'AA47754656', 'AA47754657', 'AA47754658', 'AA47754659',  np.nan, np.nan, np.nan, np.nan],
    'IFPLID_2': ['AA47754661', 'AA47754659', 'AA47754660', 'AA47754662', 'AA47754663', 'AA47754664', 'AA47754665', 'AA47754666', np.nan, np.nan, np.nan, np.nan, np.nan, 'AA47754667', 'AA47754668', 'AA47754669', 'AA47754670'],
    'Planned_aerodrome_1' : [np.nan] * 17,
    'Planned_aerodrome_2' : [np.nan] * 17,
    'Charging_zone_overflow_1' : [np.nan] * 17,
    'Charging_zone_overflow_2' : [np.nan] * 17,
    'Entry_point_1' : [np.nan] * 17,
    'Entry_point_2' : [np.nan] * 17,
    'Exit_point_1' : [np.nan] * 17,
    'Exit_point_2' : [np.nan] * 17,
    'Sup_exemption_code_1' : [np.nan] * 17,
    'Sup_exemption_code_2' : [np.nan] * 17,
    'Source of the Aircraft Address_1': [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,  np.nan, np.nan, np.nan, np.nan],
    'Source of the Aircraft Address_2': [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, np.nan, np.nan, np.nan, np.nan, np.nan, 1.0, 1.0, 1.0, 1.0],
    '24-bit Aircraft Address_1': ['89658G', '89658E', '89658F', '89658H', '89658I', '89658J', '89658K', '89658L', '89658A', '89658B', '89658C', '89658D', '89658E', np.nan, np.nan, np.nan, np.nan],
    '24-bit Aircraft Address_2': ['89658G', '89658E', '89658F', '89658H', '89658I', '89658J', '89658K', '89658L', np.nan, np.nan, np.nan, np.nan, np.nan, '89658M', '89658N', '89658O', '89658P'],
    'Comment2_1' : [np.nan] * 17,
    'Comment2_2' : [np.nan] * 17,
}

data_test_result = pd.DataFrame(data)

"""## Test difference_time"""

def test_fonction_diference_time():
    assert (difference_time(130, 10, 230202, 230202, 210101, 210101) == 120 and difference_time(800, 800, 210101, 210101, 210101, 210101) == 0
        and difference_time(800, 800, 210101, 210101, 210101, 210101) == 0
        and difference_time(1200, 1200, 210101, 210102, 210101, 210101) == 2400
        and difference_time(100, 200, 210101, 210101, 210101, 210101) == 100
        and difference_time(100, 200, 'abc', 'xyz', 210101, 210101) == 100
        and difference_time(9, 10, 210101, 210101, 210101, 210101) == 1
        and difference_time(1800, 1200, 210101, 210101, 210101, 210101) == 600
        and difference_time(1200, 1800, 210101, 210101, 210101, 210101) == 600
        and difference_time(2330, 100, 210101, 210102, 210101, 210101) == 130
        and difference_time(1, 2359, 250101, 241231, 210101, 210101) == 2), "problème fonction difference_time"

"""## Test différences_vols"""

def test_fonction_differences_vols():
    assert (differences_vols(data_test1.iloc[6], data_test2.iloc[3])
    and not(differences_vols(data_test1.iloc[6], data_test2.iloc[1]))), "problème fonction differences_vols"

"""## test Retrouver_vols"""

def test_fonction_retrouver_vols():
    vols, index = retrouver_vol(data_test1.iloc[6], data_test2, 230101, 230101)
    assert (vols[0].equals(data_test2.iloc[1]) and index == 1), "problème fonction retrouver_vols"

"""## test comparaison_data

"""

def test_fonction_comparaison_data():
    result = comparaison_data(data_test1, data_test2, 230101, 230101)
    for column in data_test_result.columns:
        data_test_result[column] = data_test_result[column].astype(result[column].dtype)
    assert result.equals(data_test_result), "problème comparaison_data"
